# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  serverless-offline:
    port: 3000
  webpackIncludeModules:
    packagePath: './package.json'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
      JWT_SECRET: ${file(env.json):JWT_SECRET}

plugins:
  - serverless-offline

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  login:
    handler: src/functions/login.handler
    events:
     - http:
         path: /login
         method: post
         cors:
             origins:
               - http://localhost:3000
               - http://localhost:3001
               - http://localhost:*
             headers:
               - Content-Type
               - X-Amz-Date
               - Authorization
               - X-Api-Key
               - X-Amz-Security-Token
               - X-Amz-User-Agent
               - Accept
               - Access-Control-Allow-Origin
               - Access-Control-Allow-Headers
             allowCredentials: true
  listTask:
    handler: src/functions/task.listTask
    events:
     - http:
         path: /tasks
         method: get
         cors:
             origins:
               - http://localhost:3000
               - http://localhost:3001
               - http://localhost:*
             headers:
               - Content-Type
               - X-Amz-Date
               - Authorization
               - X-Api-Key
               - X-Amz-Security-Token
               - X-Amz-User-Agent
               - Accept
               - Access-Control-Allow-Origin
               - Access-Control-Allow-Headers
             allowCredentials: true
  createTask:
    handler: src/functions/task.createTask
    events:
     - http:
         path: /tasks
         method: post
         cors:
             origins:
               - http://localhost:3000
               - http://localhost:3001
               - http://localhost:*
             headers:
               - Content-Type
               - X-Amz-Date
               - Authorization
               - X-Api-Key
               - X-Amz-Security-Token
               - X-Amz-User-Agent
               - Accept
               - Access-Control-Allow-Origin
               - Access-Control-Allow-Headers
             allowCredentials: true
  changeTaskStatus:
    handler: src/functions/task.changeTaskStatus
    events:
     - http:
         path: /tasks/{taskId}/{completed}
         method: put
         cors:
             origins:
               - http://localhost:3000
               - http://localhost:3001
               - http://localhost:*
             headers:
               - Content-Type
               - X-Amz-Date
               - Authorization
               - X-Api-Key
               - X-Amz-Security-Token
               - X-Amz-User-Agent
               - Accept
               - Access-Control-Allow-Origin
               - Access-Control-Allow-Headers
             allowCredentials: true
  removeTask:
    handler: src/functions/task.removeTask
    events:
     - http:
         path: /tasks/{taskId}
         method: delete
         cors:
             origins:
               - http://localhost:3000
               - http://localhost:3001
               - http://localhost:*
             headers:
               - Content-Type
               - X-Amz-Date
               - Authorization
               - X-Api-Key
               - X-Amz-Security-Token
               - X-Amz-User-Agent
               - Accept
               - Access-Control-Allow-Origin
               - Access-Control-Allow-Headers
             allowCredentials: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
